# building the Docker images and pushing them to Docker Hub. 
# AWS ECS will then pull these images and run them based on the configuration
# Terraform will be used to create the necessary infrastructure on AWS
name: CI/CD Pipeline

on:
  push:
    branches:
      - refactor-app-architecture

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_REGION: eu-central-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Login to Docker Hub
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

    - name: Build and push client Docker image
      run: |
        docker build -t $DOCKER_USERNAME/robohub-ui:latest ./client
        docker push $DOCKER_USERNAME/robohub-ui:latest

    - name: Build and push server Docker image
      run: |
        docker build -t $DOCKER_USERNAME/robohub-backend:latest ./server
        docker push $DOCKER_USERNAME/robohub-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run:  terraform -chdir=terraform init

    #- name: Destroy existing infrastructure (causes downtime)
    #  run: terraform -chdir=terraform destroy -auto-approve

    - name: Terraform Validate
      run: terraform -chdir=terraform validate

    - name: Terraform Plan
      run: terraform -chdir=terraform plan -input=false -no-color

    - name: Terraform Apply
      run: terraform -chdir=terraform apply -auto-approve
    
    - name: Set Environment Variable for React App
      run: |
        echo "REACT_APP_BACKEND_URL=http://$(terraform -chdir=terraform output -raw alb_dns_name)" > .env

    - name: Print .env file
      run: cat .env

   